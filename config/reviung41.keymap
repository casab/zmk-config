/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

// For QMK:
// KC_NONUS_BSLASH (\|) is equivalent to ["é] key in Turkish keyboards.
// KC_GRV (~ `) is equivalent to [<>|] key in Turkish keyboards.
// KC_SCLN is Turkish s [şŞ] key
// KC_QUOT is Turkish i [iİ] key
// KC_COMM is Turkish o [öÖ] key
// KC_DOT is Turkish c [çÇ] key

// For ZMK:
// NON_US_BACKSLASH (\|) is equivalent to ["é] key in Turkish keyboards.
// GRAVE (~ `) is equivalent to [<>|] key in Turkish keyboards.
// SEMI (;) is Turkish s [şŞ] key
// SQT (') is Turkish i [iİ] key
// COMMA (,) is Turkish o [öÖ] key
// DOT (.) is Turkish c [çÇ] key
// FSLH (/) is Turkish dot [.:] key
// BSLH (\) is Turkish comma (,;) key

// Custom shortcuts specific to Turkish layout
#define _CURLY_OPEN RA(N7)
#define _CURLY_CLOSE RA(N0)
#define _AT_SIGN RA(Q)
#define _SQUARE_OPEN RA(N8)
#define _SQUARE_CLOSE RA(N9)
#define _DOLLAR_SIGN RA(N4)
#define _BACKSLASH RA(MINUS)
#define _VERTICAL_PIPE RA(EQUAL)
#define _BACKTICK RA(BACKSLASH)
#define _TILDE RA(RIGHT_BRACKET)
#define _NUMBER_SIGN RA(N3) //hashtag sign
#define _LOCKSCREEN LC(LS(C_PWR)) // Screen Lock shortcut for OSX

// Layers
#define _QWERTY 0
#define _GAMING 1
#define _LOWER 2
#define _CMDSHIFT 3
#define _RAISE 4
#define _NUMPAD 5
#define _UTIL 6


/ {
        behaviors {
                h_alt: hold_alternative {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOLD_ALTERNATIVE";
                        #binding-cells = <2>;
                        tapping-term-ms = <130>;
                        quick_tap_ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&kp>;
                };
                hom: hold_only_multiple {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOLD_ONLY_MULTIPLE";
                        #binding-cells = <2>;
                        flavor = "tap-unless-interrupted";
                        tapping-term-ms = <300>;                        // <---[[produces tap if held longer than tapping-term-ms]]
                        quick-tap-ms = <200>;
                        bindings = <&kp>, <&kp>;
                };
                optcmd: option_command {
                        compatible = "zmk,behavior-mod-morph";
                        label = "OPTION_COMMAND";
                        #binding-cells = <0>;
                        bindings = <&mmlic>, <&kp LGUI>;
                        mods = <(MOD_LALT)>;
                };
                procmd: pro_command {
                        compatible = "zmk,behavior-hold-tap";
                        label = "PRO_COMMAND";
                        #binding-cells = <2>;
                        tapping-term-ms = <600>; // Adjust this to your preference
                        flavor = "hold-preferred";
                        bindings = <&kp &mo>; // mmlic when tapped, CMD when held
                        // use it like &procmd LGUI 0
                };
                mmlic: mm_lower_instant_comma {
                        compatible = "zmk,behavior-mod-morph";
                        label = "MM_LOWER_INSTANT_COMMA";
                        #binding-cells = <0>;
                        bindings = <&procmd LGUI _LOWER>, <&kp BSLH>;
                        mods = <(MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                }; 
                mmnet: mm_numpad_escape_tab {
                        compatible = "zmk,behavior-mod-morph";
                        label = "MM_NUMPAD_ESCAPE_TAB";
                        #binding-cells = <0>;
                        bindings = <&lt _NUMPAD ESC>, <&kp TAB>;
                        mods = <(MOD_LALT|MOD_LSFT|MOD_LCTL|MOD_LGUI)>;
                        keep-mods = <(MOD_LALT|MOD_LSFT|MOD_LCTL|MOD_LGUI)>;
                }; 
                prog_caps: behavior_prog_caps_word {
                        compatible = "zmk,behavior-caps-word";
                        label = "PROG_CAPS";
                        #binding-cells = <0>;
                        continue-list = <PLUS>;
                };
                mt_cw: mod_tap_caps_word {
                        compatible = "zmk,behavior-hold-tap";
                        label = "MT_CW";
                        #binding-cells = <2>;
                        tapping-term-ms = <100>;
                        flavor = "hold-preferred";
                        bindings = <&kp>, <&prog_caps>;
                };
                fmt: faster_mod_tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "FASTER_MOD_tap";
                        #binding-cells = <2>;
                        tapping-term-ms = <100>;
                        flavor = "hold-preferred";
                        bindings = <&kp>, <&kp>;
                };
        };



        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------------------------
// |Npd/ESC/T|  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U/Ü |  I  |  O  |  P  | RSft/BKSP|
// |Sft/Cps  |  A  |  S  |  D  |  F  | G/Ğ |   |  H  |  J   |  K  |  L  |  Ş  |    İ     |
// |LCtlTab  |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  Ö  |  Ç  |  .  | RCtlEnt  |
//                      |LGUI/ALT | LWR/, |  SPC  | RSE/"  | ALT  |
                        bindings = <
   &mmnet  &kp Q  &kp W  &kp E  &kp R  &kp T                &kp Y  &h_alt RIGHT_BRACKET U  &kp I  &kp O  &kp P  &hom RSHFT BSPC
   &mt_cw LSHFT 0  &kp A  &kp S  &kp D  &kp F  &h_alt LEFT_BRACKET G      &kp H  &kp J  &kp K  &kp L  &kp SEMI  &kp SQT
   &fmt LCTRL TAB  &kp Z  &kp X  &kp C  &kp V  &kp B                 &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RET
        &h_alt LALT LGUI        &mmlic      &kp SPACE    &lt _RAISE GRAVE    &kp RALT
                        >;
                };


                gaming_layer {
// -------------------------------------------------------------------------------------
// |Npd/ESC/T|  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U/Ü |  I  |  O  |  P  | RSft/BKSP|
// |  Sft    |  A  |  S  |  D  |  F  | G/Ğ |   |  H  |  J   |  K  |  L  |  Ş  |   İ/TAB  |
// |  LCtl   |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  Ö  |  Ç  |  .  | RCtlEnt  |
//                     |   ALT   | LWR/, |  SPC  |  RSE/"  | Tog Gaming  |
                        bindings = <
   &lt _NUMPAD ESC  &kp Q  &kp W  &kp E  &kp R  &kp T                &kp Y  &h_alt RIGHT_BRACKET U  &kp I  &kp O  &kp P  &hom RSHFT BSPC
   &kp LSHFT &kp A  &kp S  &kp D  &kp F  &h_alt LEFT_BRACKET G      &kp H  &kp J  &kp K  &kp L  &kp SEMI  &h_alt TAB SQT
   &kp LCTRL &kp Z  &kp X  &kp C  &kp V  &kp B                 &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RET
        &kp LALT       &lt _LOWER BSLH          &kp SPACE    &lt _RAISE GRAVE       &tog _GAMING
                        >;
                };

/*
                lower_layer {
// -------------------------------------------------------------------------------
// |  "  |  !  |  '  |  ^  |  +  |  %  |   |  &  |  /  |  (  |  )  |  =  |   ?   |
// |  <  |  >  |  `  |  #  |  $  |     |   |Left |Down | Up  |Right|  *  |   -   |            // &kp LEFT_BRACKET  &kp RIGHT_BRACKET for Ğ and Ü
// | "|" |  @  |     |     |     |     |   |     | "{" | "[" | "]" | "}" |   _   |
//                       |      |    |  DEL | UTIL | F14 |
                        bindings = <
   &kp GRAVE     &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT                                       &kp CARET  &kp AMPS  &kp ASTERISK  &kp LPAR &kp RPAR  &kp UNDERSCORE
   &kp NON_US_BSLH  &kp LS(NON_US_BSLH) &kp _BACKTICK  &kp _NUMBER_SIGN  &kp _DOLLAR_SIGN  &none        &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT &kp MINUS  &kp EQUAL
   &kp _VERTICAL_PIPE  &kp _AT_SIGN  &none  &none  &none  &none                                                       &none  &kp _CURLY_OPEN  &kp _SQUARE_OPEN  &kp _SQUARE_CLOSE  &kp _CURLY_CLOSE  &kp PLUS
                                                             &LGUI  &trans    &kp DEL    &mo _UTIL  &trans
                        >;
                };
*/
                lower_layer {
// -------------------------------------------------------------------------------
// |  "  |  !  |  '  |  ^  |  +  |  %  |   |  &  |  /  |  (  |  )  |  =  |   ?   |
// |  <  |  >  |  `  |  #  |  $  |     |   |Left |Down | Up  |Right|  *  |   -   |            // &kp LEFT_BRACKET  &kp RIGHT_BRACKET for Ğ and Ü
// | "|" |  @  |     |     |     |     |   |     | "{" | "[" | "]" | "}" |   _   |
//                       |      |    |  DEL | UTIL | F14 |
                        bindings = <
   &kp LG(TAB)     &kp LG(Q)  &kp LG(W)  &kp LG(E)  &kp LG(R)  &kp LG(T)                    &kp CARET  &kp AMPS  &kp ASTERISK  &kp LPAR &kp RPAR  &kp UNDERSCORE
   &mo _CMDSHIFT &kp LG(A) &kp LG(S) &kp LG(D) &kp LG(F) &kp LG(G)                     &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT &kp MINUS  &kp EQUAL
   &kp LG(LCTRL)  &kp LG(Z) &kp LG(X) &kp LG(C) &kp LG(V) &kp LG(B)                  &kp LG(N)  &kp _CURLY_OPEN  &kp _SQUARE_OPEN  &kp _SQUARE_CLOSE  &kp _CURLY_CLOSE  &kp PLUS
                                             &kp LG(LALT)  &trans    &kp LG(SPACE)    &lt _UTIL LG(GRAVE) &trans
                        >;
                };

                cmdshift_layer {
// -------------------------------------------------------------------------------------
// |Npd/ESC/T|  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U/Ü |  I  |  O  |  P  | RSft/BKSP|
// |Sft/Cps  |  A  |  S  |  D  |  F  | G/Ğ |   |  H  |  J   |  K  |  L  |  Ş  |    İ     |
// |LCtlTab  |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  Ö  |  Ç  |  .  | RCtlEnt  |
//                      |LGUI/ALT | LWR/, |  SPC  | RSE/"  | ALT  |
                        bindings = <
   &kp LG(LS(TAB))  &kp LG(LS(Q))  &kp LG(LS(W))  &kp LG(LS(E))  &kp LG(LS(R))  &kp LG(LS(T))                &kp LG(LS(Y))  &kp LG(LS(U))  &kp LG(LS(I))  &kp LG(LS(O))  &kp LG(LS(P))  &none
   &trans        &kp LG(LS(A))  &kp LG(LS(S))  &kp LG(LS(D))  &kp LG(LS(F))  &kp LG(LS(G))                  &kp LG(LS(H))  &kp LG(LS(J))  &kp LG(LS(K))  &kp LG(LS(L))  &kp LG(LS(SEMI))  &kp LG(LS(SQT))
   &kp LG(LS(LCTRL)) &kp LG(LS(Z))  &kp LG(LS(X))  &kp LG(LS(C))  &kp LG(LS(V))  &kp LG(LS(B))           &kp LG(LS(N))  &kp LG(LS(M))  &kp LG(LS(COMMA))  &kp LG(LS(DOT))  &kp LG(LS(FSLH))  &none
                          &kp LG(LS(LALT))        &none          &kp LG(LS(SPACE))    &lt _RAISE GRAVE    &kp RALT
                        >;
                };
                raise_layer {
// -------------------------------------------------------------------------------
// |  "  |  !  |  '  |  ^  |  +  |  %  |   |  &  |  /  |  (  |  )  |  =  |   ?   |
// |  <  |  >  |  `  |  #  |  $  |     |   |Home |PgDwn|PgUp |End  | "\" |  "~"  |
// | "|" |  @  |     |     |     |     |   |     | "{" | "[" | "]" | "}" |   _   |
//                       |     | UTIL | DEL |    |     |
                        bindings = <
   &kp GRAVE     &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT                                       &kp CARET  &kp AMPS  &kp ASTERISK  &kp LPAR &kp RPAR  &kp UNDERSCORE
   &kp NON_US_BSLH  &kp LS(NON_US_BSLH) &kp _BACKTICK  &kp _NUMBER_SIGN  &kp _DOLLAR_SIGN  &none        &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END &kp _BACKSLASH  &kp _TILDE
   &kp _VERTICAL_PIPE  &kp _AT_SIGN  &none  &none  &none  &none                                                       &none  &kp _CURLY_OPEN  &kp _SQUARE_OPEN  &kp _SQUARE_CLOSE  &kp _CURLY_CLOSE  &kp PLUS
                                                        &trans  &mo _UTIL    &kp DEL    &trans    &trans 
                        >;
                };

                // KP_DOT is comma on the Turkish layout ¯\_(ツ)_/¯
                numpad_layer {
// -----------------------------------------------------------------------------------------
// |     |     |     |     |     |     |   |  =  |Num7 |Num8 |Num9 |  -  |Bcksp |
// | F1  | F2  | F3  | F4  | F5  | F6  |   |  .  |Num4 |Num5 |Num6 |  +  |  *   |
// | F7  | F8  | F9  | F10 | F11 | F12 |   |  ,  |Num1 |Num2 |Num3 |  .  |  /   |
//                   |      |     | SPC |  Num0  |  Num0   |
                        bindings = <
   &none  &none  &none  &none  &none  &none                     &kp KP_EQUAL  &kp N7  &kp N8  &kp N9  &kp KP_MINUS  &kp BSPC
   &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                     &kp SLASH  &kp N4  &kp N5  &kp N6  &kp KP_PLUS  &kp MINUS
   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12                     &kp KP_DOT &kp N1  &kp N2  &kp N3  &kp SLASH  &kp KP_SLASH
                                &none  &none    &kp SPACE   &kp N0   &kp N0 
                        >;
                };

                util_layer {
// -----------------------------------------------------------------------------------------
// | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | RGB TOG |   |  BT1  | BT2 | BT3 | BT4 | BT5   |  BT CLR  |
// | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI+ |    |         |   |       |     |     |     |       |  RESET   |
// |   Brgt▼  |  Brgt▲   |   Prev   |   Next   |Vol-|    Vol+ |   |PlayPse|     |     |     |TOG PWR|BOOTLOADER|
//                               |     |     |Tog Gaming|     |     |
                        bindings = <
   &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &none &rgb_ug RGB_TOG    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
   &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &none &none              &none        &none        &none        &none        &none        &sys_reset
   &kp C_BRI_DEC  &kp C_BRI_INC  &kp C_PREV &kp C_NEXT  &kp C_VOL_DN &kp C_VOL_UP           &kp C_PLAY_PAUSE  &none        &none        &none    &ext_power EP_TOG        &bootloader
                                                      &trans      &trans       &tog _GAMING        &trans      &trans
                        >;
                };
        };
};
